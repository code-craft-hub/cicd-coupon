name: Deploy to Kubernetes

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'The version tag to deploy (leave blank to use artifact version)'
        required: false
        type: string
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
  
  workflow_call:
    inputs:
      version_tag:
        required: false
        type: string
      environment:
        required: true
        type: string
    secrets:
      KUBECONFIG_CONTENT:
        required: true
      KUBERNETES_SECRETS:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    env:
      NAMESPACE: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download version artifact if version_tag not provided
        if: ${{ inputs.version_tag == null || inputs.version_tag == '' }}
        uses: actions/download-artifact@v4
        with:
          name: version
          path: ./artifact

      - name: Set version tag
        id: set_version
        run: |
          if [ -z "${{ inputs.version_tag }}" ]; then
            VERSION_TAG=$(cat ./artifact/version.txt)
          else
            VERSION_TAG="${{ inputs.version_tag }}"
          fi
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "Version tag is $VERSION_TAG"

      - name: Debug input values
        run: |
          echo "NAMESPACE is: $NAMESPACE"
          echo "VERSION_TAG is: $VERSION_TAG"

      - name: Configure kubectl for DigitalOcean
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Verify kubeconfig access
        run: kubectl get nodes

      - name: Validate Namespace
        run: |
          if [ -z "$NAMESPACE" ]; then
            echo "Error: NAMESPACE is not set"
            exit 1
          fi
          if [[ "$NAMESPACE" != "staging" && "$NAMESPACE" != "production" ]]; then
            echo "Error: Invalid NAMESPACE value: $NAMESPACE"
            exit 1
          fi

      - name: Ensure namespace exists
        run: |
          kubectl get namespace $NAMESPACE || kubectl create namespace $NAMESPACE

      - name: Deploy Backend & Celery
        run: |
          helm upgrade --install coupon-service ./k8s/backend \
            --set backend.image.repository=fakay96/coupon-core \
            --set backend.image.tag=$VERSION_TAG \
            --set celery.image.repository=fakay96/coupon-celery \
            --set celery.image.tag=$VERSION_TAG \
            --namespace $NAMESPACE --create-namespace \
            -f ./k8s/backend/values/$NAMESPACE-values.yaml \
            --atomic --force --cleanup-on-fail --history-max 5 \
            --timeout 30m0s

      - name: Deploy Frontend
        run: |
          helm upgrade --install frontend ./k8s/frontend \
            --set frontend.image.repository=fakay96/coupon-frontend \
            --set frontend.image.tag=$VERSION_TAG \
            --namespace $NAMESPACE --create-namespace \
            -f ./k8s/frontend/values/$NAMESPACE-values.yaml \
            --atomic --force --cleanup-on-fail --history-max 5 \
            --timeout 5m0s

      - name: Verify service endpoints
        run: |
          kubectl get endpoints coupon-service -n $NAMESPACE || echo "Backend service endpoint not found!"
          kubectl get endpoints frontend -n $NAMESPACE || echo "Frontend service endpoint not found!"

      - name: Debug pod logs on failure
        if: failure()
        run: |
          echo "Fetching logs for failed pods..."
          kubectl logs -l app=backend -n $NAMESPACE || echo "No logs found for backend"
          kubectl logs -l app=frontend -n $NAMESPACE || echo "No logs found for frontend"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Rolling back deployments..."
          LAST_BACKEND_REVISION=$(helm history coupon-service -n $NAMESPACE | tail -n 2 | head -n 1 | awk '{print $1}')
          LAST_FRONTEND_REVISION=$(helm history frontend -n $NAMESPACE | tail -n 2 | head -n 1 | awk '{print $1}')
          
          helm rollback coupon-service $LAST_BACKEND_REVISION -n $NAMESPACE || echo "Failed to rollback backend"
          helm rollback frontend $LAST_FRONTEND_REVISION -n $NAMESPACE || echo "Failed to rollback frontend"
